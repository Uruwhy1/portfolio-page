---
import BlogPosts from "./BlogPosts.astro";
import styles from "./Content.module.css";
---

<div class={styles.contentContainer}>
  <div class={styles.viewToggle}>
    <button class={styles.active} data-view="about" id="aboutBtn">About</button>
    <button data-view="blog" id="blogBtn">Blog</button>
  </div>
  <div class={styles.viewContent}>
    <div class={styles.about} id="aboutContent">
      <p>
        Self-taught web developer based in Montevideo, Uruguay. Most of the apps
        I've built are done with React and Express.js.
      </p>
      <p>
        Beyond web development, I've built multiple Discord bots, including a
        warnings tracker used by an 800+ member server to streamline moderation.
        I also developed a desktop app using Tauri to efficiently manage my
        gaming clips.
      </p>
      <p>I like playing Minesweeper.</p>
    </div>
    <div class={styles.blogs} id="blogContent" style="display: none;">
      <BlogPosts />
    </div>
  </div>
</div>
<script>
  import styles from "./Content.module.css";

  interface ViewConfig {
    btnId: string;
    contentId: string;
    isDefault: boolean;
  }

  interface ViewConfigMap {
    [key: string]: ViewConfig;
  }

  interface ContentElementMap {
    [key: string]: HTMLElement | null;
  }

  const views: ViewConfigMap = {
    about: {
      btnId: "aboutBtn",
      contentId: "aboutContent",
      isDefault: true,
    },
    blog: {
      btnId: "blogBtn",
      contentId: "blogContent",
      isDefault: false,
    },
  };

  const viewButtons =
    document.querySelectorAll<HTMLButtonElement>("[data-view]");

  const viewContents: ContentElementMap = Object.fromEntries(
    Object.values(views).map((view) => [
      view.contentId,
      document.getElementById(view.contentId),
    ]),
  );

  let currentView =
    Object.keys(views).find((key) => views[key].isDefault) || "about";

  function changeView(newView: string): void {
    if (newView === currentView) return;

    Object.values(viewContents).forEach((element) => {
      if (element) element.style.display = "none";
    });

    const viewConfig = views[newView];
    if (!viewConfig) return; // Guard against invalid view names

    const targetContent = viewContents[viewConfig.contentId];
    if (targetContent) targetContent.style.display = "flex";

    viewButtons.forEach((button) => {
      button.classList.toggle(styles.active, button.dataset.view === newView);
    });

    currentView = newView;
  }

  viewButtons.forEach((button) => {
    button.addEventListener("click", () => {
      const view = button.dataset.view;
      if (view) changeView(view);
    });
  });
</script>
